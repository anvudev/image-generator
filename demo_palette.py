"""
Demo script ƒë·ªÉ th·ª≠ nghi·ªám palette override
"""
import requests
import json

def demo_palette_override():
    """Demo c√°c t√≠nh nƒÉng palette override"""
    
    print("üé® DEMO: Palette Override Feature")
    print("=" * 50)
    
    # 1. L·∫•y th√¥ng tin palette
    print("üìã 1. Danh s√°ch m√†u c√≥ s·∫µn:")
    try:
        response = requests.get("http://localhost:8000/palette")
        if response.status_code == 200:
            data = response.json()
            palette = data['palette']
            
            print("   Ch·ªâ s·ªë | M√†u     | M√¥ t·∫£")
            print("   -------|---------|----------")
            color_names = {
                "1": "ƒê·ªè", "2": "Xanh d∆∞∆°ng", "3": "Xanh l√°", "4": "V√†ng",
                "5": "Cam", "6": "T√≠m", "7": "H·ªìng", "8": "Cyan",
                "9": "Xanh nh·∫°t", "10": "N√¢u", "11": "X√°m", "12": "Tr·∫Øng"
            }
            
            for idx, color in palette.items():
                name = color_names.get(idx, "Unknown")
                print(f"   {idx:>6} | {color:>7} | {name}")
                
        else:
            print(f"   ‚ùå L·ªói: {response.status_code}")
            return
            
    except Exception as e:
        print(f"   ‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return
    
    print("\n" + "=" * 50)
    
    # 2. C√°c v√≠ d·ª• s·ª≠ d·ª•ng
    examples = [
        {
            "name": "üî¥ Ch·ªâ m√†u ƒë·ªè",
            "palette": "1",
            "description": "Ch·ªâ s·ª≠ d·ª•ng m√†u ƒë·ªè"
        },
        {
            "name": "üåà 4 m√†u c∆° b·∫£n",
            "palette": "1,2,3,4",
            "description": "ƒê·ªè, xanh d∆∞∆°ng, xanh l√°, v√†ng"
        },
        {
            "name": "üé® T√¥ng pastel",
            "palette": "[7,8,9,11]",
            "description": "H·ªìng, cyan, xanh nh·∫°t, x√°m"
        },
        {
            "name": "üî• T√¥ng n√≥ng",
            "palette": "[1,4,5]",
            "description": "ƒê·ªè, v√†ng, cam"
        },
        {
            "name": "‚ùÑÔ∏è T√¥ng l·∫°nh",
            "palette": "[2,3,8,9]",
            "description": "Xanh d∆∞∆°ng, xanh l√°, cyan, xanh nh·∫°t"
        }
    ]
    
    print("üí° 2. V√≠ d·ª• s·ª≠ d·ª•ng palette_override:")
    for i, example in enumerate(examples, 1):
        print(f"\n   {i}. {example['name']}")
        print(f"      palette_override={example['palette']}")
        print(f"      ‚Üí {example['description']}")
        
        # T·∫°o curl command
        curl_cmd = f"""curl -X POST \\
  -F "file=@your_image.png" \\
  -F "cols=30" \\
  -F "rows=30" \\
  -F "palette_override={example['palette']}" \\
  http://localhost:8000/convert"""
        
        print(f"      Command:")
        for line in curl_cmd.split('\n'):
            print(f"        {line}")
    
    print("\n" + "=" * 50)
    
    # 3. Test l·ªói
    print("‚ö†Ô∏è  3. Test c√°c tr∆∞·ªùng h·ª£p l·ªói:")
    
    error_cases = [
        {
            "palette": "1,99",
            "error": "Ch·ªâ s·ªë 99 kh√¥ng t·ªìn t·∫°i (ch·ªâ c√≥ 1-12)"
        },
        {
            "palette": "abc,def",
            "error": "Format kh√¥ng h·ª£p l·ªá (ph·∫£i l√† s·ªë)"
        },
        {
            "palette": "1,2,3,",
            "error": "C√≥ d·∫•u ph·∫©y th·ª´a"
        }
    ]
    
    for i, case in enumerate(error_cases, 1):
        print(f"\n   {i}. palette_override={case['palette']}")
        print(f"      ‚Üí L·ªói: {case['error']}")
    
    print("\n" + "=" * 50)
    print("‚ú® Demo ho√†n th√†nh!")
    print("\nüí° ƒê·ªÉ test th·ª±c t·∫ø:")
    print("   1. Chu·∫©n b·ªã file ·∫£nh (PNG/JPG/WebP)")
    print("   2. S·ª≠ d·ª•ng curl command ·ªü tr√™n")
    print("   3. Ho·∫∑c d√πng Postman/Insomnia ƒë·ªÉ test")

if __name__ == "__main__":
    demo_palette_override()
